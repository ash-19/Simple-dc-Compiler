/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{
  // If you are using a different version of Java, change this.  JDK_VERSION = "1.8";  static = false;}/**
 * This defines the main class that is generated by the parser generator.  We've
 * added a main method to the code that will be generated.
**/PARSER_BEGIN(Checker)package checker;import java.util.HashMap;
public class Checker{
  // Maps programming language variables to types.
  private HashMap<String, String > types =
        new HashMap<String, String >();

  // If the type is not "int", throws a TypeException
  public void checkInt (String type)
  {    if (!(type.equals("int")))
    {      throw new TypeException("Expected int, received " + type);
    }
  }
    public static void main(String args [])  {    Checker checker = new Checker(System.in);    try    {      checker.program();    }
    catch (TypeException e)
    {      System.err.println("Type error: " + e.getMessage());
    }    catch (ParseException e)    {      System.err.println("Parse error: " + e.getMessage());    }    catch (TokenMgrError e)    {      System.err.println(e.getMessage());    }
    catch (RuntimeException e)
    {
      System.err.println(e.getMessage());
    }  }}

/**
 * Exception used to report type-checking errors.
 */
 class TypeException extends RuntimeException
 {   public TypeException (String message)
   {     super(message);
   }
 }PARSER_END(Checker)/************************ Regular expressions that define tokens ***********************/SKIP : /* Whitespace to be ignored */
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Operators */
{
  < ASSIGN : "=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < LESSTHAN : "<" >
| < GREATERTHAN : ">" >
| < EQUALTO : "==" >
| < NOT : "!" >
}

TOKEN : /* Keywords and punctuation */
{
  < INTTYPE : "int" >
| < STRINGTYPE : "string" >
| < BOOLEANTYPE : "boolean" >
| < PRINT : "print" >
| < NEWLINE : "newline" >
| < READ : "read" >
| < SEMI: ";" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < IF: "if" >
| < ELSE: "else" >
| < OPENBRACE: "{" >
| < CLOSEBRACE: "}" >
}

TOKEN : /* Constants, variables, strings */
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < BOOLEAN : "true" | "false" >
| < VAR : (< LETTER >)+ >
| < #LETTER : [ "a"-"z" ] | [ "A"-"Z" ] >
| < STRING: "\"" (~["\"", "[", "]"])* "\"" >
}
/***************************** Productions that define grammar *******************/void program() :
{
}
{
  ( statement() )* < EOF >
}

void statement() :
{
  Token t;
  Token vtype;
  String etype;
}
{
    t = < VAR > < ASSIGN > etype = exp() < SEMI >
    {
      if (types.get(t.image) == null)
      {
          throw new TypeException("Undeclared variable: " + t.image);
      }
      if (!types.get(t.image).equals(etype))
	  {
		  throw new TypeException("Type mismatch: " + types.get(t.image) + "=" + etype);
      }		
    }
|
    ( vtype = < INTTYPE > | vtype = < STRINGTYPE > | vtype = < BOOLEANTYPE > ) t = < VAR > < ASSIGN > etype = exp() < SEMI >
    {
      if (types.get(t.image) == null)
      {
		types.put(t.image, vtype.image);

		if (!vtype.image.equals(etype))
		{
		  throw new TypeException("Type mismatch: " + vtype.image + "=" + etype);
		}
      }
      else
      {
        throw new TypeException("Variable already declared: " + t.image);
      }
    }
|   
    < PRINT > etype = exp() < SEMI >
|
  	< NEWLINE > < SEMI >
|
  	< READ > t = < VAR > < SEMI >
	{
      if (types.get(t.image) == null)
      {
          throw new TypeException("Undeclared variable: " + t.image);
      }
      if (!types.get(t.image).equals("int"))
	  {
		  throw new TypeException("Type mismatch, need a int variable.");
      }
	}
|
  < IF > < LPAREN > etype = exp() < RPAREN >
  {
    if (!etype.equals("boolean"))
	{
	  throw new TypeException("Type mismatch: " + "if (" + etype + ")");
	}
  }
  block() < ELSE > block()
}

void block() :
{
}
{
  < OPENBRACE >
  (
    statement()
  )*
  < CLOSEBRACE >
}

String exp() :
{
  Token t;
  String type1, type2;
}
{
  type1 = greatOrLessExp()
  (
    t = < EQUALTO > type2 = greatOrLessExp()
    {
      if (!type1.equals(type2))
	  {
		  throw new TypeException("Type mismatch: " + type1 + t.image + type2);
      }
      type1 = "boolean";
    }
  )*
  {
    return type1;
  }
}

String greatOrLessExp() :
{
  Token t;
  String type1, type2;
}
{
  type1 = arithematicExp()
  (
    (t = < LESSTHAN > | t = < GREATERTHAN >) type2 = arithematicExp()
    {
      checkInt(type1);
      checkInt(type2);
      type1 = "boolean";
    }
  )*
  {
    return type1;
  }
}

String arithematicExp() :
{
  Token t;
  String type1, type2;
}
{
  type1 = term()
  (
    ( t = < PLUS > | t = < MINUS > ) type2 = term()
    {
      checkInt(type1);
	  checkInt(type2);
    }
  )*
  {
    return type1;
  }
}

String term() :
{
  Token t;
  String type1, type2;
}
{
  type1 = factor()
  (
    ( t = < MULTIPLY > | t = < DIVIDE > ) type2 = factor()
    {
      checkInt(type1);
      checkInt(type2);
    }
  )*
  {
    return type1;
  }
}

String factor() :
{
  String type;
}
{
  < MINUS > type = element()
  {
    checkInt(type);
    return "int";
  }
|
  type = element()
  {
	return type;
  }
}

String element() :
{
  Token t;
  String type;
}
{
  t = < CONSTANT >
  {
    return "int";
  }
|
  t = < STRING >
  {
    return "string";
  }
|  
  t = < VAR >
  {
    if (types.get(t.image) == null)
    {
		throw new TypeException("Undefined variable " + t.image);
    }
    return types.get(t.image);
  }
|
  < LPAREN > type = exp() < RPAREN >
  {
	return type;
  }
|
  t = < BOOLEAN >
  {
    return "boolean";
  }
|
	< NOT > type = element()
	{
		if (!type.equals("boolean"))
		{
		  throw new TypeException("Type mismatch: " + "!" + type);
		}
		return "boolean";
	}
}